# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WetToday(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, temperature: float=None, humidity: float=None, rainfall: float=None, rainfall24hr: float=None, timestamp: datetime=None):  # noqa: E501
        """WetToday - a model defined in Swagger

        :param id: The id of this WetToday.  # noqa: E501
        :type id: int
        :param temperature: The temperature of this WetToday.  # noqa: E501
        :type temperature: float
        :param humidity: The humidity of this WetToday.  # noqa: E501
        :type humidity: float
        :param rainfall: The rainfall of this WetToday.  # noqa: E501
        :type rainfall: float
        :param rainfall24hr: The rainfall24hr of this WetToday.  # noqa: E501
        :type rainfall24hr: float
        :param timestamp: The timestamp of this WetToday.  # noqa: E501
        :type timestamp: datetime
        """
        self.swagger_types = {
            'id': int,
            'temperature': float,
            'humidity': float,
            'rainfall': float,
            'rainfall24hr': float,
            'timestamp': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'temperature': 'temperature',
            'humidity': 'humidity',
            'rainfall': 'rainfall',
            'rainfall24hr': 'rainfall24hr',
            'timestamp': 'timestamp'
        }
        self._id = id
        self._temperature = temperature
        self._humidity = humidity
        self._rainfall = rainfall
        self._rainfall24hr = rainfall24hr
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'WetToday':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WetToday of this WetToday.  # noqa: E501
        :rtype: WetToday
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this WetToday.


        :return: The id of this WetToday.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this WetToday.


        :param id: The id of this WetToday.
        :type id: int
        """

        self._id = id

    @property
    def temperature(self) -> float:
        """Gets the temperature of this WetToday.


        :return: The temperature of this WetToday.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this WetToday.


        :param temperature: The temperature of this WetToday.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def humidity(self) -> float:
        """Gets the humidity of this WetToday.


        :return: The humidity of this WetToday.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this WetToday.


        :param humidity: The humidity of this WetToday.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def rainfall(self) -> float:
        """Gets the rainfall of this WetToday.


        :return: The rainfall of this WetToday.
        :rtype: float
        """
        return self._rainfall

    @rainfall.setter
    def rainfall(self, rainfall: float):
        """Sets the rainfall of this WetToday.


        :param rainfall: The rainfall of this WetToday.
        :type rainfall: float
        """

        self._rainfall = rainfall

    @property
    def rainfall24hr(self) -> float:
        """Gets the rainfall24hr of this WetToday.


        :return: The rainfall24hr of this WetToday.
        :rtype: float
        """
        return self._rainfall24hr

    @rainfall24hr.setter
    def rainfall24hr(self, rainfall24hr: float):
        """Sets the rainfall24hr of this WetToday.


        :param rainfall24hr: The rainfall24hr of this WetToday.
        :type rainfall24hr: float
        """

        self._rainfall24hr = rainfall24hr

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this WetToday.


        :return: The timestamp of this WetToday.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this WetToday.


        :param timestamp: The timestamp of this WetToday.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
